#pragma once

#include "idt.h"

namespace keyboard {
    enum class Key {
        F9 = 0x01,
        F5 = 0x03,
        F3 = 0x04,
        F1 = 0x05,
        F2 = 0x06,
        F12 = 0x07,
        F10 = 0x09,
        F8 = 0x0a,
        F6 = 0x0b,
        F4 = 0x0c,
        TAB = 0x0d,
        BACK_TICK = 0x0e,
        LEFT_ALT = 0x11,
        LEFT_SHIFT = 0x12,
        LEFT_CTRL = 0x14,
        Q = 0x15,
        N_1 = 0x16,
        Z = 0x1a,
        S = 0x1b,
        A = 0x1c,
        W = 0x1d,
        N_2 = 0x1e,
        C = 0x21,
        X = 0x22,
        D = 0x23,
        E = 0x24,
        N_4 = 0x25,
        N_3 = 0x26,
        SPACE = 0x29,
        V = 0x2a,
        F = 0x2b,
        T = 0x2c,
        R = 0x2d,
        N_5 = 0x2e,
        N = 0x31,
        B = 0x32,
        H = 0x33,
        G = 0x34,
        Y = 0x35,
        N_6 = 0x36,
        M = 0x3a,
        J = 0x3b,
        U = 0x3c,
        N_7 = 0x3d,
        N_8 = 0x3e,
        COMA = 0x41,
        K = 0x42,
        I = 0x43,
        O = 0x44,
        N_0 = 0x45,
        N_9 = 0x46,
        DOT = 0x49,
        SLASH = 0x4a,
        L = 0x4b,
        SEMICOLON = 0x4c,
        P = 0x4d,
        MINUS = 0x4e,
        QUOTE = 0x52,
        LBRACKET = 0x54,
        EQUALS = 0x55,
        CAPSLOCK = 0x58,
        RIGHT_SHIFT = 0x59,
        ENTER = 0x5a,
        RBRACKET = 0x5b,
        BACKSLASH = 0x5d,
        BACKSPACE = 0x66,
        NUMPAD_1 = 0x69,
        NUMPAD_4 = 0x6b,
        NUMPAD_7 = 0x6c,
        NUMPAD_0 = 0x70,
        NUMPAD_DOT = 0x71,
        NUMPAD_2 = 0x72,
        NUMPAD_5 = 0x73,
        NUMPAD_6 = 0x74,
        NUMPAD_8 = 0x75,
        ESCAPE = 0x76,
        NUMLOCK = 0x77,
        F11 = 0x78,
        NUMPAD_PLUS = 0x79,
        NUMPAD_3 = 0x7a,
        NUMPAD_MINUS = 0x7b,
        NUMPAD_STAR = 0x7c,
        NUMPAD_9 = 0x7d,
        SCROLLLOCK = 0x7e,
        F7 = 0x83,
        MEDIA_WWW_SEARCH = 0xe010,
        RIGHT_ALT = 0xe011,
        RIGHT_CTRL = 0xe014,
        MEDIA_PREVIOUS_TRACK = 0xe015,
        MEDIA_WWW_FAVOURITES = 0xe018,
        LEFT_SUPER = 0xe01f,
        MEDIA_WWW_REFRESH = 0xe020,
        MEDIA_VOLUME_DOWN = 0xe021,
        MEDIA_MUTE = 0xe023,
        RIGHT_SUPER = 0xe027,
        MEDIA_WWW_STOP = 0xe028,
        MEDIA_CALCULATOR = 0xe02b,
        APPS = 0xe02f,
        MEDIA_WWW_FORWARD = 0xe030,
        MEDIA_VOLUME_UP = 0xe032,
        MEDIA_PLAY_PAUSE = 0xe034,
        ACPI_POWER = 0xe037,
        MEDIA_WWW_BACK = 0xe038,
        MEDIA_WWW_HOME = 0xe03a,
        MEDIA_STOP = 0xe03b,
        ACPI_SLEEP = 0xe03f,
        MEDIA_MY_COMPUTER = 0xe040,
        MEDIA_EMAIL = 0xe048,
        NUMPAD_SLASH = 0xe04a,
        MEDIA_NEXT_TRACK = 0xe04d,
        MEDIA_MEDIA_SELECT = 0xe050,
        NUMPAD_ENTER = 0xe05a,
        ACPI_WAKE = 0xe05e,
        END = 0xe069,
        ARROW_LEFT = 0xe06b,
        HOME = 0xe06c,
        INSERT = 0xe070,
        DELETE = 0xe071,
        ARROW_DOWN = 0xe072,
        ARROW_RIGHT = 0xe074,
        ARROW_UP = 0xe075,
        PAGE_DOWN = 0xe07a,
        PAGE_UP = 0xe07d,
    };

    static constexpr uint8_t MODIFIER_SHIFT = 1 << 0;
    static constexpr uint8_t MODIFIER_CTRL  = 1 << 1;
    static constexpr uint8_t MODIFIER_ALT   = 1 << 2;
    static constexpr uint8_t MODIFIER_SUPER = 1 << 3;

    struct KeyEventArgs {
        Key key;
        bool released;
        char character;
        uint8_t modifiers;
    };

    typedef void (*KeyEventCallback)(KeyEventArgs args);

    void set_callback(KeyEventCallback func);

    void irq_handler(idt::InterruptFrame*);

    const char* get_key_name(Key key);
}
